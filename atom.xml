<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zengxiaotao&#39;s personal blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-29T15:57:37.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zengxiaotao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用mobx</title>
    <link href="http://yoursite.com/posts/e80b6dcf/"/>
    <id>http://yoursite.com/posts/e80b6dcf/</id>
    <published>2018-07-29T15:54:40.000Z</published>
    <updated>2018-07-29T15:57:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>mobx</p><h2 id="observable"><a href="#observable" class="headerlink" title="observable"></a>observable</h2><h3 id="原始值"><a href="#原始值" class="headerlink" title="原始值"></a>原始值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;observable&#125; = <span class="built_in">require</span>(<span class="string">'mobx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = observable(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.get()) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;mobx&lt;/p&gt;
&lt;h2 id=&quot;observable&quot;&gt;&lt;a href=&quot;#observable&quot; class=&quot;headerlink&quot; title=&quot;observable&quot;&gt;&lt;/a&gt;observable&lt;/h2&gt;&lt;h3 id=&quot;原始值&quot;&gt;&lt;a href=&quot;#原始值&quot; c
      
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="mobx" scheme="http://yoursite.com/tags/mobx/"/>
    
  </entry>
  
  <entry>
    <title>less语法</title>
    <link href="http://yoursite.com/posts/94797274/"/>
    <id>http://yoursite.com/posts/94797274/</id>
    <published>2018-07-28T10:19:22.000Z</published>
    <updated>2018-08-12T04:57:06.434Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下</p><a id="more"></a><h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><p>根据<a href="http://lesscss.cn/features/" target="_blank" rel="noopener">文档</a>的顺序。</p><ul><li style="list-style: none"><input type="checkbox"> variables</li><li style="list-style: none"><input type="checkbox" checked> merge</li><li style="list-style: none"><input type="checkbox"> parent-selector</li></ul><h2 id="开始前"><a href="#开始前" class="headerlink" title="开始前"></a>开始前</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install less -g</span><br></pre></td></tr></table></figure><p>由于 less 是 linux 中一个内置的命令，因此为了区分（我猜的），使用 lessc 来编译文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lessc styles.less styles.css</span><br></pre></td></tr></table></figure><p>如果使用的编辑器是 vs code，那么可以安装 easy-less 插件。每次保存 less 文件后，可以自动编译成 css 文件。</p><h2 id="variables-（变量）"><a href="#variables-（变量）" class="headerlink" title="variables （变量）"></a>variables （变量）</h2><p>个人认为 引入变量 在代码书写量上没有明显的减少，变量的最大作用是维护成本较低。当属性一个css 属性时，往往只需要改动一个地方即可。</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@themeColor:</span> <span class="number">#ff5000</span>;</span><br><span class="line"><span class="variable">@largeSize:</span> <span class="number">24px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@themeColor</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="parent-selector"><a href="#parent-selector" class="headerlink" title="parent-selector"></a>parent-selector</h2><p>parent-selector 应该算是 less 里用的比较多的功能了，能大幅减少代码的长度。</p><h3 id="最基本的用法"><a href="#最基本的用法" class="headerlink" title="最基本的用法"></a>最基本的用法</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">&amp;</span> <span class="selector-tag">&amp;</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: blue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">&amp;</span> <span class="selector-tag">&amp;</span> &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.a</span> <span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多个-amp"><a href="#多个-amp" class="headerlink" title="多个 &amp;"></a>多个 &amp;</h3><h3 id="通过-amp-来改变选择器的顺序"><a href="#通过-amp-来改变选择器的顺序" class="headerlink" title="通过 &amp; 来改变选择器的顺序"></a>通过 &amp; 来改变选择器的顺序</h3><h3 id="amp-能同时指代多个-parent"><a href="#amp-能同时指代多个-parent" class="headerlink" title="&amp; 能同时指代多个 parent"></a>&amp; 能同时指代多个 parent</h3><h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><p>用于合并同一个css 属性的两部分属性值，分为通过逗号(;) 和 空格( ) 合并。</p><h3 id="通过逗号连接"><a href="#通过逗号连接" class="headerlink" title="通过逗号连接"></a>通过逗号连接</h3><blockquote><p>语法 property+</p></blockquote><p>用于可以应用多组属性值的属性，如 box-shadow</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.merge1</span>() &#123;</span><br><span class="line">    <span class="selector-tag">box-shadow</span>+: <span class="selector-tag">inset</span> <span class="selector-tag">0</span> <span class="selector-tag">0</span> <span class="selector-tag">10px</span> <span class="selector-id">#555</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">    <span class="selector-class">.merge1</span>();</span><br><span class="line">    <span class="selector-tag">box-shadow</span>+:  <span class="selector-tag">0</span> <span class="selector-tag">0</span> <span class="selector-tag">20px</span> <span class="selector-tag">black</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#555</span>, <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过空格连接"><a href="#通过空格连接" class="headerlink" title="通过空格连接"></a>通过空格连接</h3><blockquote><p>语法 property+_</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.base_border</span>() &#123;</span><br><span class="line">    <span class="selector-tag">border</span>+<span class="selector-tag">_</span>: <span class="selector-tag">1px</span> <span class="selector-tag">solid</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.red_border</span> &#123;</span><br><span class="line">    <span class="selector-class">.base_border</span>();</span><br><span class="line">    <span class="selector-tag">border</span>+<span class="selector-tag">_</span>: <span class="selector-tag">red</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.red_border</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又或者</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> demo &#123;</span><br><span class="line">  <span class="selector-tag">0%</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">100%</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#000000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.base_animation</span>() &#123;</span><br><span class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> linear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.custom_animation</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: demo <span class="number">1s</span> linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> demo &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#000000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.custom_animation</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: demo <span class="number">1s</span> linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>【译】对象扩展符简易指南</title>
    <link href="http://yoursite.com/posts/adc6686/"/>
    <id>http://yoursite.com/posts/adc6686/</id>
    <published>2018-04-28T11:02:23.000Z</published>
    <updated>2018-05-07T12:56:56.997Z</updated>
    
    <content type="html"><![CDATA[<p>合并多个 Javascript 对象是常见的工作，但不好的是，至少到目前，Javascript 仍然没有一种方便的方法来完成这个工作。至少现在是这样。</p><p>在 ES5 时代，你可以使用 Lodash 的 <code>_.extend(target, [sources])</code> 方法，而 ES2015 则引入了 <code>Object.assign(target, [sources])</code> 方法。</p><a id="more"></a><p>幸运的是，<a href="https://github.com/tc39/proposal-object-rest-spread" target="_blank" rel="noopener">对象扩展符</a> (an ECMASript proposal at stage 3) 是一个很大的进步，提供了简单方便的如下简介方便的语法。</p><p><a href="https://repl.it/@panzerdp/FearlessLovableUintagroundsquirrel" target="_blank" rel="noopener">Run demo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cat = &#123;   </span><br><span class="line">  legs: <span class="number">4</span>,</span><br><span class="line">  sound: <span class="string">'meow'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> dog = &#123;  </span><br><span class="line">  ...cat,</span><br><span class="line">  sound: <span class="string">'woof'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dog); <span class="comment">// =&gt; &#123; legs: 4, sounds: 'woof' &#125;</span></span><br></pre></td></tr></table></figure><p>上面的例子中，<code>...cat</code> 复制 <code>cat</code> 的属性到一个新对象 <code>dog</code> 中，<code>cat</code> 中原来的属性 <code>sound</code> 被覆盖，最终值为 <code>woof</code>。</p><p>本篇文章将介绍对象 spread 和 rest 语法。包括如何实现对象克隆，对象合并，以及如何覆盖属性值。</p><p>下面是关于可枚举属性的简单和概括，以及如何分辨对象自有属性和继承属性。</p><h3 id="1-可枚举以及自有属性"><a href="#1-可枚举以及自有属性" class="headerlink" title="1. 可枚举以及自有属性"></a>1. 可枚举以及自有属性</h3><p>Javascript 里的对象是键值对的组合。</p><p>键名通常是一个字符串或者一个 symbol 。值可以是一个原始类型的值(string, boolean, number, <code>undefined</code> 或者 <code>null</code>)，一个对象或者一个函数。</p><p>下面这个例子将通过对象字面量语法创建一个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;  </span><br><span class="line">  name: <span class="string">'Dave'</span>,</span><br><span class="line">  surname: <span class="string">'Bowman'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>person</code> 这个对象描述了一个人的名和姓氏。</p><h4 id="1-1-可枚举属性"><a href="#1-1-可枚举属性" class="headerlink" title="1.1 可枚举属性"></a>1.1 可枚举属性</h4><p>描述一个属性有几种描述符，如 writable、enumerable 和configurable 。你可以看这篇文章<a href="http://2ality.com/2012/10/javascript-properties.html" target="_blank" rel="noopener">Object properties in JavaScript</a>了解更多细节。</p><p><em>Enumerable</em> 描述符是一个布尔值，表示这个属性是否可以被枚举。</p><p>你可以通过 <code>Object.keys()</code> 方法来枚举一个对象的自有属性和可枚举属性，通过 <code>for..in</code> 语句来枚举所有可枚举的属性。</p><p>以对象字面量的形式创建对象 <code>{ prop1: &#39;val1&#39;, prop2: &#39;val2&#39; }</code> 时显式声明的属性都是可枚举的。接下来看看之前创建的 <code>person</code> 对象有哪些可枚举的属性。</p><p><a href="https://repl.it/@panzerdp/UnrulyYearlyAmericanlobster" target="_blank" rel="noopener">Run demo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(person);  </span><br><span class="line"><span class="built_in">console</span>.log(keys); <span class="comment">// =&gt; ['name', 'surname']</span></span><br></pre></td></tr></table></figure><p><code>.name</code> 和 <code>.surname</code> 是 <code>person</code> 对象的可枚举属性</p><p>接下来是有趣的一部分。<em>对象扩展符复制了原对象的所有可枚举属性。</em></p><p><a href="https://repl.it/@panzerdp/DependentUnevenIberianmidwifetoad" target="_blank" rel="noopener">Run demo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(&#123; ...person &#125;; <span class="comment">// =&gt; &#123; name: 'Dave', surname: 'Bowman' &#125;</span></span><br></pre></td></tr></table></figure><p>下面我们在 <code>person</code> 对象上创建一个不可枚举属性 <code>.age</code>。</p><p><a href="https://repl.it/@panzerdp/SameFirmBlackrhino" target="_blank" rel="noopener">Run demo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">'age'</span>, &#123;  </span><br><span class="line">  enumerable: <span class="literal">false</span>, <span class="comment">// Make the property non-enumerable</span></span><br><span class="line">  value: <span class="number">25</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(person[<span class="string">'age'</span>]); <span class="comment">// =&gt; 25</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clone = &#123;  </span><br><span class="line">  ...person</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(clone); <span class="comment">// =&gt; &#123; name: 'Dave', surname: 'Bowman' &#125;</span></span><br></pre></td></tr></table></figure><p>目标对象 <code>clone</code> 从源对象 <code>person</code> 上创建了可枚举属性 <code>.name</code> 和 <code>.surname</code> ，但是不可枚举属性 <code>.age</code> 则被忽略掉。</p><h3 id="1-2-自有属性"><a href="#1-2-自有属性" class="headerlink" title="1.2 自有属性"></a>1.2 自有属性</h3><p>Javascript 内有原型继承机制，因此一个对象上既有 <strong>自有</strong>属性，也有从<strong>继承</strong>属性。</p><p>对象字面量显式声明的属性都是<strong>自有</strong>属性，存在于原型链上的属性都是 <strong>继承</strong> 属性。</p><p>下面将创建一个 <code>personB</code> 对象，并将 <code>person</code> 对象设置成其原型对象。</p><p><a href="https://repl.it/@panzerdp/MonumentalUnimportantAmericancrayfish" target="_blank" rel="noopener">Run demo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> personB = <span class="built_in">Object</span>.create(person, &#123;  </span><br><span class="line">  profession: &#123;</span><br><span class="line">    value: <span class="string">'Astronaut'</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(personB.hasOwnProperty(<span class="string">'profession'</span>)); <span class="comment">// =&gt; true  </span></span><br><span class="line"><span class="built_in">console</span>.log(personB.hasOwnProperty(<span class="string">'name'</span>));       <span class="comment">// =&gt; false  </span></span><br><span class="line"><span class="built_in">console</span>.log(personB.hasOwnProperty(<span class="string">'surname'</span>));    <span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><p>现在 <code>personB</code> 上有自有的 <code>.profession</code> 属性，以及从原型对象 <code>person</code> 上继承来的 <code>.name</code> 和 <code>.surname</code> 属性。</p><p><em>对象扩展符从源对象上复制<strong>自有</strong>属性，而会忽略继承的属性</em></p><p><a href="https://repl.it/@panzerdp/OccasionalThirstyMinibeast" target="_blank" rel="noopener">Run demo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cloneB = &#123;  </span><br><span class="line">  ...personB</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(cloneB); <span class="comment">// =&gt; &#123; profession: 'Astronaut' &#125;</span></span><br></pre></td></tr></table></figure><p><code>...personB</code> 只从 <code>personB</code> 上复制了 <code>.profession</code> 这个自有属性，而继承属性 <code>.name</code> 和 <code>.surname</code> 则被忽略。</p><blockquote><p>总结： 对象扩展符号只会从源对象上复制 <strong>自有和可枚举属性</strong>，这和 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys" target="_blank" rel="noopener">Object.keys()</a> 方法的返回值一样。</p></blockquote><h3 id="2-对象扩展属性"><a href="#2-对象扩展属性" class="headerlink" title="2. 对象扩展属性"></a>2. 对象扩展属性</h3><p>在对象字面量里，<strong>对象扩展符</strong>将<strong>源对象</strong>里的自有属性和可枚举属性复制进<strong>目标对象</strong>内。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> targetObject = &#123;  </span><br><span class="line">  ...sourceObject,</span><br><span class="line">  property: <span class="string">'Value'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>顺便说一下，很多时候，对象扩展符与 <code>Object.assign()</code> 等价，上面的代码也可以用这样实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> targetObject = <span class="built_in">Object</span>.assign(  </span><br><span class="line">  &#123; &#125;, </span><br><span class="line">  sourceObject,</span><br><span class="line">  &#123; <span class="attr">property</span>: <span class="string">'Value'</span> &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>一个对象字面量里可以使用多个对象扩展符，与普通的属性声明同时使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> targetObject = &#123;  </span><br><span class="line">  ...sourceObject1,</span><br><span class="line">  property1: <span class="string">'Value 1'</span>,</span><br><span class="line">  ...sourceObject2,</span><br><span class="line">  ...sourceObject3,</span><br><span class="line">  property2: <span class="string">'Value 2'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-1-对象扩展规则：后面的属性会覆盖前面的"><a href="#2-1-对象扩展规则：后面的属性会覆盖前面的" class="headerlink" title="2.1 对象扩展规则：后面的属性会覆盖前面的"></a>2.1 对象扩展规则：后面的属性会覆盖前面的</h4><p>当同时扩展多个对象时，这个对象内可能会存在同名属性，那么最终生成的对象的属性值是怎么计算的，规则很简单：<strong>后扩展的属性会覆盖之前扩展的属性</strong>。</p><p>来看一些简单的例子。下面的代码会实例化一只 cat 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cat = &#123;  </span><br><span class="line">  sound: <span class="string">'meow'</span>,</span><br><span class="line">  legs: <span class="number">4</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在我们要变一个魔术，将这只猫变成一只狗，注意 <code>.sound</code> 属性值如何变化。</p><p><a href="https://repl.it/@panzerdp/LightgraySleepyRooster" target="_blank" rel="noopener">Run demo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dog = &#123;  </span><br><span class="line">  ...cat,</span><br><span class="line">  ...&#123;</span><br><span class="line">    sound: <span class="string">'woof'</span> <span class="comment">// `&lt;----- Overwrites cat.sound</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(dog); <span class="comment">// =&gt;` &#123; sound: 'woof', legs: 4 &#125;</span></span><br></pre></td></tr></table></figure><p>后面声明的 <code>·woof·</code> 属性值覆盖了前面的在 <code>cat</code> 对象声明的属性值 <code>&#39;meow&#39;</code> , 符合之前所说的规则: 对于同名属性，后声明的值覆盖先声明的值。</p><p>这个规则同样适用于对象的初始化</p><p><a href="https://repl.it/@panzerdp/CloudyTotalAnophelesmosquito" target="_blank" rel="noopener">Run demo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> anotherDog = &#123;  </span><br><span class="line">  ...cat,</span><br><span class="line">  sound: <span class="string">'woof'</span> <span class="comment">// `&lt;---- Overwrites cat.sound</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(anotherDog); <span class="comment">// =&gt;` &#123; sound: 'woof', legs: 4 &#125;</span></span><br></pre></td></tr></table></figure><p>上面代码里，<code>sound: &#39;woof&#39;</code> 同样覆盖了之前声明的 <code>&#39; meow&#39;</code> 值。</p><p>现在，交换一下扩展对象的位置，输出了不同的结果。</p><p><a href="https://repl.it/@panzerdp/CharmingAwfulChimneyswift" target="_blank" rel="noopener">Run demo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stillCat = &#123;  </span><br><span class="line">  ...&#123;</span><br><span class="line">    sound: <span class="string">'woof'</span> <span class="comment">// `&lt;---- Is overwritten by cat.sound</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...cat</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(stillCat); <span class="comment">// =&gt;` &#123; sound: 'meow', legs: 4 &#125;</span></span><br></pre></td></tr></table></figure><p><code>cat</code> 对象仍然是 <code>cat</code> 对象。虽然第一个源对象内的 <code>.sound</code> 属性值是 <code>&#39;woof&#39;</code> ，但是被之后 <code>cat</code> 对象的 <code>&#39;meow&#39;</code> 覆盖。</p><p>普通属性和对象扩展的相对位置非常重要，这将直接影响到对象克隆，对象合并，以及填充默认属性的结果。</p><p>下面分别详细介绍。</p><h3 id="2-2-克隆对象"><a href="#2-2-克隆对象" class="headerlink" title="2.2 克隆对象"></a>2.2 克隆对象</h3><p>用对象扩展符克隆一个对象非常简洁，下面的代码克隆了一个 <code>bird</code> 对象。</p><p><a href="https://repl.it/@panzerdp/InsubstantialUnnaturalJabiru" target="_blank" rel="noopener">Run demo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bird = &#123;  </span><br><span class="line">  type: <span class="string">'pigeon'</span>,</span><br><span class="line">  color: <span class="string">'white'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> birdClone = &#123;  </span><br><span class="line">  ...bird</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(birdClone); <span class="comment">// =&gt; &#123; type: 'pigeon', color: 'white' &#125;  </span></span><br><span class="line"><span class="built_in">console</span>.log(bird === birdClone); <span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><p><code>...bird</code> 将 <code>bird</code> 对象的自有和可枚举属性复制到目标对象 <code>birdClone</code> 内。</p><p>虽然克隆看起来很简单，但仍然要注意其中的几个细微之处。</p><h4 id="浅复制"><a href="#浅复制" class="headerlink" title="浅复制"></a>浅复制</h4><p>对象扩展只是对对象进行了 <em>浅复制</em>, 只有对象自身被复制，而嵌套的对象结构 <em>没有被复制</em>。</p><p><code>laptop</code> 对象有一个嵌套对象 <code>laptop.screen</code>。现在我们来克隆 <code>laptop</code>对象来看看其内部的嵌套对象怎么变化。</p><p><a href="https://repl.it/@panzerdp/WellmadeEnlightenedTurtle" target="_blank" rel="noopener">Run demo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> laptop = &#123;  </span><br><span class="line">  name: <span class="string">'MacBook Pro'</span>,</span><br><span class="line">  screen: &#123;</span><br><span class="line">    size: <span class="number">17</span>,</span><br><span class="line">    isRetina: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> laptopClone = &#123;  </span><br><span class="line">  ...laptop</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(laptop === laptopClone);               <span class="comment">// =&gt; false  </span></span><br><span class="line"><span class="built_in">console</span>.log(laptop.screen === laptopClone.screen); <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>第一个比较语句 <code>laptop === laptopClone</code> 的值为 <code>false</code>, 说明主对象被正确克隆。</p><p>然而 <code>laptop.screen === laptopClone.screen</code> 的计算结果为 <code>true</code> ，说明 <code>laptopClone.screen</code> 没有被复制，而是 <code>laptop.screen</code> 和 <code>laptopClone.screen</code> 引用了同一个嵌套对象。</p><p>好的一点是，你可以在对象的任何一层使用对象扩展符，只需要再多做一点工作就同样可以克隆一个嵌套对象。</p><p><a href="https://repl.it/@panzerdp/CyanSoreColt" target="_blank" rel="noopener">Run demo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> laptopDeepClone = &#123;  </span><br><span class="line">  ...laptop,</span><br><span class="line">  screen: &#123;</span><br><span class="line">     ...laptop.screen</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(laptop === laptopDeepClone);               <span class="comment">// =&gt; false  </span></span><br><span class="line"><span class="built_in">console</span>.log(laptop.screen === laptopDeepClone.screen); <span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><p>使用 <code>...laptop.screen</code> 使嵌套对象也被克隆，现在 <code>laptopDeepClone</code> 完全克隆了 <code>laptop</code>。</p><h4 id="原型失去了"><a href="#原型失去了" class="headerlink" title="原型失去了"></a>原型失去了</h4><p>下面的代码声明了一个 <code>Game</code> 类，并创造了一个 <code>doom</code>实例。</p><p><a href="https://repl.it/@panzerdp/TediousProbableMuskox" target="_blank" rel="noopener">Run demo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getMessage() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`I like <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>!`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> doom = <span class="keyword">new</span> Game(<span class="string">'Doom'</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(doom <span class="keyword">instanceof</span> Game); <span class="comment">// =&gt; true  </span></span><br><span class="line"><span class="built_in">console</span>.log(doom.name);            <span class="comment">// =&gt; "Doom"  </span></span><br><span class="line"><span class="built_in">console</span>.log(doom.getMessage());    <span class="comment">// =&gt; "I like Doom!"</span></span><br></pre></td></tr></table></figure><p>现在我们克隆一个通过构造函数创建的 <code>doom</code> 实例，结果可能与你想的不同。</p><p><a href="https://repl.it/@panzerdp/HummingFatalEthiopianwolf" target="_blank" rel="noopener">Run demo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> doomClone = &#123;  </span><br><span class="line">  ...doom</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(doomClone <span class="keyword">instanceof</span> Game); <span class="comment">// =&gt; false  </span></span><br><span class="line"><span class="built_in">console</span>.log(doomClone.name);            <span class="comment">// =&gt; "Doom"  </span></span><br><span class="line"><span class="built_in">console</span>.log(doomClone.getMessage());  </span><br><span class="line"><span class="comment">// TypeError: doomClone.getMessage is not a function</span></span><br></pre></td></tr></table></figure><p><code>...doom</code> 将自有属性 <code>.name</code> 属性复制到 <code>doomClone</code> 内。</p><p><code>doomClone</code> 现在只是一个普通的 JavaScript 对象，它的原型是 <code>Object.prototype</code> 而不是预想中的<code>Game.prototype</code>。<em>对象扩展不保留源对象的原型。</em></p><p>因此调用 <code>doomClone.getMessage()</code> 方法会抛出一个 <code>TypeError</code> 错误，因此 <code>doomClone</code> 没有继承 <code>getMessage()</code> 方法。</p><p>当然我们可以手动在克隆对象上加上 <code>__proto__</code> 属性来结局这个问题。</p><p><a href="https://repl.it/@panzerdp/PreciousGroundedJuliabutterfly" target="_blank" rel="noopener">Run demo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> doomFullClone = &#123;  </span><br><span class="line">  ...doom,</span><br><span class="line">  __proto__: Game.prototype</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(doomFullClone <span class="keyword">instanceof</span> Game); <span class="comment">// =&gt; true  </span></span><br><span class="line"><span class="built_in">console</span>.log(doomFullClone.name);            <span class="comment">// =&gt; "Doom"  </span></span><br><span class="line"><span class="built_in">console</span>.log(doomFullClone.getMessage());    <span class="comment">// =&gt; "I like Doom!"</span></span><br></pre></td></tr></table></figure><p>对象字面量内部的 <code>__proto__</code> 属性确保了 <code>doomFullClone</code> 的原型为 <code>Game.prototype</code>。</p><p><em>尽量不要尝试这种方法</em>。<code>__proto__</code> 属性已经废弃，这里使用它只是为了论证前面的观点。</p><p>对象扩展的目的是以浅复制的方式扩展自有和可枚举属性，因此不保留源对象的原型似乎也说得过去。</p><p>例外，这里用 <code>Object.assign()</code> 来克隆 <code>doom</code> 更加合理。</p><p><a href="https://repl.it/@panzerdp/DecentUnsteadyGavial" target="_blank" rel="noopener">Run demo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> doomFullClone = <span class="built_in">Object</span>.assign(<span class="keyword">new</span> Game(), doom);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(doomFullClone <span class="keyword">instanceof</span> Game); <span class="comment">// =&gt; true  </span></span><br><span class="line"><span class="built_in">console</span>.log(doomFullClone.name);            <span class="comment">// =&gt; "Doom"  </span></span><br><span class="line"><span class="built_in">console</span>.log(doomFullClone.getMessage());    <span class="comment">// =&gt; "I like Doom!"</span></span><br></pre></td></tr></table></figure><p>这样，就保留了原型。</p><h4 id="2-3-不可变对象更新"><a href="#2-3-不可变对象更新" class="headerlink" title="2.3 不可变对象更新"></a>2.3 不可变对象更新</h4><p>在一个应用里，同一个对象可能会用于多个地方，直接修改这个对象会带来意想不到的副作用，并且追踪这个修改及其困难。</p><p>一个好的方式是使操作不可变。不可变性使修改对象更为可控，更有利于书写。<a href="https://medium.com/@jamesjefferyuk/javascript-what-are-pure-functions-4d4d5392d49c" target="_blank" rel="noopener">pure functions</a>。即时是在复杂的应用场景，由于单向数据流，更容易确定对象的来源和改变的原因。</p><p>使用对象扩展能更方便的以不可变方式来修改一个对象。假设现在你有一个对象来描述一本书的信息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> book = &#123;  </span><br><span class="line">  name: <span class="string">'JavaScript: The Definitive Guide'</span>,</span><br><span class="line">  author: <span class="string">'David Flanagan'</span>,</span><br><span class="line">  edition: <span class="number">5</span>,</span><br><span class="line">  year: <span class="number">2008</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在，书第六版即将出版，我们用对象扩展的处理这个场景。</p><p><a href="https://repl.it/@panzerdp/DistantWrongYak" target="_blank" rel="noopener">Run demo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newerBook = &#123;  </span><br><span class="line">  ...book,</span><br><span class="line">  edition: <span class="number">6</span>,  <span class="comment">// &lt;----- Overwrites book.edition</span></span><br><span class="line">  year: <span class="number">2011</span>   <span class="comment">// &lt;----- Overwrites book.year</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newerBook);  </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  name: 'JavaScript: The Definitive Guide',</span></span><br><span class="line"><span class="comment">  author: 'David Flanagan',</span></span><br><span class="line"><span class="comment">  edition: 6,</span></span><br><span class="line"><span class="comment">  year: 2011</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><code>newerBook</code> 对象内的 <code>...book</code> 扩展了 <code>book</code> 对象的属性。手动创建的可枚举属性 <code>editon: 6</code> 和 <code>year: 2011</code> 更新了原有的同名属性。</p><p>重要的属性一般在末尾来指定，以便覆盖前面已经创建的同名属性。</p><p><code>newerBook</code> 是一个更新了某些属性的新的对象，并且我们没有改变原有的 <code>book</code> 对象，满足了不可变性的要求。</p><h4 id="2-4-合并对象"><a href="#2-4-合并对象" class="headerlink" title="2.4 合并对象"></a>2.4 合并对象</h4><p>使用对象扩展符合并多个对象非常简单。</p><p>现在我们合并3个对象来创建一个“合成对象”。</p><p><a href="https://repl.it/@panzerdp/LightseagreenMatureItaliangreyhound" target="_blank" rel="noopener">Run demo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> part1 = &#123;  </span><br><span class="line">  color: <span class="string">'white'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> part2 = &#123;  </span><br><span class="line">  model: <span class="string">'Honda'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> part3 = &#123;  </span><br><span class="line">  year: <span class="number">2005</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> car = &#123;  </span><br><span class="line">  ...part1,</span><br><span class="line">  ...part2,</span><br><span class="line">  ...part3</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(car); <span class="comment">// &#123; color: 'white', model: 'Honda', year: 2005 &#125;</span></span><br></pre></td></tr></table></figure><p>上面的例子中，我们使用 <code>part1</code>、<code>part2</code>、<code>part3</code> 3个对象合并成了一个 <code>car</code> 对象。</p><p>另外，不要忘了之前讲的规则，<code>后面的属性值会覆盖前面的同名属性值</code>。这是我们合并有同名属性对象的计算依据。</p><p>现在我们稍微改变一下之前的代码。给 <code>part1</code> 和 <code>part3</code> 增加一个 <code>.configuration</code> 属性。</p><p><a href="https://repl.it/@panzerdp/RuralUnkemptDrake" target="_blank" rel="noopener">Run demo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> part1 = &#123;  </span><br><span class="line">  color: <span class="string">'white'</span>,</span><br><span class="line">  configuration: <span class="string">'sedan'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> part2 = &#123;  </span><br><span class="line">  model: <span class="string">'Honda'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> part3 = &#123;  </span><br><span class="line">  year: <span class="number">2005</span>,</span><br><span class="line">  configuration: <span class="string">'hatchback'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> car = &#123;  </span><br><span class="line">  ...part1,</span><br><span class="line">  ...part2,</span><br><span class="line">  ...part3 <span class="comment">// &lt;--- part3.configuration overwrites part1.configuration</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(car);  </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123; </span></span><br><span class="line"><span class="comment">  color: 'white', </span></span><br><span class="line"><span class="comment">  model: 'Honda', </span></span><br><span class="line"><span class="comment">  year: 2005,</span></span><br><span class="line"><span class="comment">  configuration: 'hatchback'  `&lt;--- part3.configuration</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><code>...part1</code> 将 <code>configuration</code> 属性设置成了 <code>&#39;sedan&#39;</code>。然而之后的扩展符 <code>...part3</code> 覆盖了之前的同名 <code>.configuration</code>，最终生成的对象值为 <code>&#39;hatchback&#39;</code>。</p><h3 id="2-5-给对象设置默认值"><a href="#2-5-给对象设置默认值" class="headerlink" title="2.5 给对象设置默认值"></a>2.5 给对象设置默认值</h3><p>一个对象在程序运行时可能会有多套不同的属性值，有些属性可能会被设置，有些则可能被忽略。</p><p>这种情况通常发生在一个配置对象上。用户可以指定一个重要的属性值，不重要的属性则使用默认值。</p><p>现在我们来实现一个 <code>multline(str, config)</code> 方法，将<code>str</code> 按照给定的长度分割成多行。</p><p><code>config</code> 对象接受下面3个可选的参数。</p><ul><li><code>width</code>: 分割的字符长度，默认是 <code>10</code>。</li><li><code>newLine</code>: 添加到每一行结尾的的字符， 默认是 <code>\n</code>。</li><li><code>indent</code>: 每一行开头的缩进符，默认是空字符串 <code>&#39;&#39;</code>。</li></ul><p>下面是一些 <code>multline()</code> 运行的例子。</p><p><a href="https://repl.it/@panzerdp/FrankFirsthandBullfrog" target="_blank" rel="noopener">Run demo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">multiline(<span class="string">'Hello World!'</span>);  </span><br><span class="line"><span class="comment">// =&gt;` 'Hello Worl\nd!'</span></span><br><span class="line"></span><br><span class="line">multiline(<span class="string">'Hello World!'</span>, &#123; <span class="attr">width</span>: <span class="number">6</span> &#125;);  </span><br><span class="line"><span class="comment">// =&gt; 'Hello \nWorld!'</span></span><br><span class="line"></span><br><span class="line">multiline(<span class="string">'Hello World!'</span>, &#123; <span class="attr">width</span>: <span class="number">6</span>, <span class="attr">newLine</span>: <span class="string">'*'</span> &#125;);  </span><br><span class="line"><span class="comment">// =&gt; 'Hello *World!'</span></span><br><span class="line"></span><br><span class="line">multiline(<span class="string">'Hello World!'</span>, &#123; <span class="attr">width</span>: <span class="number">6</span>, <span class="attr">newLine</span>: <span class="string">'*'</span>, <span class="attr">indent</span>: <span class="string">'_'</span> &#125;);  </span><br><span class="line"><span class="comment">// =&gt; '_Hello *_World!'</span></span><br></pre></td></tr></table></figure><p><code>config</code> 参数接受几套不同的属性值：你可以指定1，2或者3个属性值，甚至不指定任何一个属性。</p><p>使用对象扩展语法来填充配置对象非常简单，在对象字面量里，首先扩展默认值对象，然后是配置对象，如下所示：</p><p><a href="https://repl.it/@panzerdp/FrankFirsthandBullfrog" target="_blank" rel="noopener">Run demo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiline</span>(<span class="params">str, config = &#123;&#125;</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">const</span> defaultConfig = &#123;</span><br><span class="line">    width: <span class="number">10</span>,</span><br><span class="line">    newLine: <span class="string">'\n'</span>,</span><br><span class="line">    indent: <span class="string">''</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> safeConfig = &#123;</span><br><span class="line">    ...defaultConfig,</span><br><span class="line">    ...config</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">''</span>;</span><br><span class="line">  <span class="comment">// Implementation of multiline() using</span></span><br><span class="line">  <span class="comment">// safeConfig.width, safeConfig.newLine, safeConfig.indent</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来仔细了解一下 <code>safeConfig</code> 对象。</p><p><code>...defaultConfig</code> 首先将默认对象的属性复制，随后，<code>...config</code> 里用户自定义的值覆盖了之前的默认属性值。</p><p>这样 <code>safeConfig</code> 值就拥有了所有 <code>multiline()</code> 需要的配置参数。无论调用 <code>multiline()</code> 函数时，输入的 <code>config</code> 是否缺失了某些属性，都可以保证 <code>safeConfig</code> 拥有所有的必备参数。</p><p>显而易见，对象扩展实现了我们想要的 给对象设置默认值。</p><h4 id="2-6-更加深入"><a href="#2-6-更加深入" class="headerlink" title="2.6 更加深入"></a>2.6 更加深入</h4><p>对象扩展更有用的一点是用于嵌套对象，当更新一个复杂对象时，更具有可读性，比 <code>Object.assign()</code> 更值得推荐。</p><p>下面的 <code>box</code> 对象定义一个盒子及盒子内的物品。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> box = &#123;  </span><br><span class="line">  color: <span class="string">'red'</span>,</span><br><span class="line">  size: &#123;</span><br><span class="line">    width: <span class="number">200</span>, </span><br><span class="line">    height: <span class="number">100</span> </span><br><span class="line">  &#125;,</span><br><span class="line">  items: [<span class="string">'pencil'</span>, <span class="string">'notebook'</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>box.size</code> 描述了这个盒子的尺寸，<code>box.items</code> 列举了盒子内的物品。</p><p>为了使盒子看起来更高，我们增大 <code>box.size.height</code> 的值，只需要在嵌套对象上使用 <code>对象扩展符</code>。</p><p><a href="https://repl.it/@panzerdp/DemandingShoddyInsect" target="_blank" rel="noopener">Run demo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> biggerBox = &#123;  </span><br><span class="line">  ...box,</span><br><span class="line">  size: &#123;</span><br><span class="line">    ...box.size,</span><br><span class="line">    height: <span class="number">200</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(biggerBox);  </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  color: 'red',</span></span><br><span class="line"><span class="comment">  size: &#123;</span></span><br><span class="line"><span class="comment">    width: 200, </span></span><br><span class="line"><span class="comment">    height: 200 &lt;----- Updated value</span></span><br><span class="line"><span class="comment">  &#125;,</span></span><br><span class="line"><span class="comment">  items: ['pencil', 'notebook']</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><code>...box</code> 确保了 <code>biggerBox</code> 获得了 源对象 <code>box</code> 上的全部属性。</p><p>更新 <code>box.size</code> 的 height 值需要额外一个 <code>{...box.size, height: 200}</code> 对象，该对象接收 <code>box.size</code> 的全部属性，并将 height 值更新至 <code>200</code>。</p><p>只需要一个语句就能更新对象的多处属性。</p><p>现在如果我们还想把颜色改成 <code>black</code> ,增加盒子的宽度到 <code>400</code>, 并且再放一把尺子到盒子内，应该怎么办？同样很简单。</p><p><a href="https://repl.it/@panzerdp/ElectricLinearMayfly" target="_blank" rel="noopener">Run demo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> blackBox = &#123;  </span><br><span class="line">  ...box,</span><br><span class="line">  color: <span class="string">'black'</span>,</span><br><span class="line">  size: &#123;</span><br><span class="line">    ...box.size,</span><br><span class="line">    width: <span class="number">400</span></span><br><span class="line">  &#125;,</span><br><span class="line">  items: [</span><br><span class="line">    ...box.items,</span><br><span class="line">    <span class="string">'ruler'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(blackBox);  </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  color: 'black', &lt;----- Updated value</span></span><br><span class="line"><span class="comment">  size: &#123;</span></span><br><span class="line"><span class="comment">    width: 400, &lt;----- Updated value</span></span><br><span class="line"><span class="comment">    height: 100 </span></span><br><span class="line"><span class="comment">  &#125;,</span></span><br><span class="line"><span class="comment">  items: ['pencil', 'notebook', 'ruler'] `&lt;----- A new item ruler</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="2-7-扩展-undefined、null-和-原始类型值"><a href="#2-7-扩展-undefined、null-和-原始类型值" class="headerlink" title="2.7 扩展 undefined、null 和 原始类型值"></a>2.7 扩展 <code>undefined</code>、<code>null</code> 和 <code>原始类型值</code></h4><p>如果在 <code>undefined</code>、<code>null</code> 和 <code>原始类型值</code> 上使用原始类型的值，不会复制任何属性，也不会抛出错误，只是简单的返回一个空对象。</p><p><a href="https://repl.it/@panzerdp/ForcefulFeminineKissingbug" target="_blank" rel="noopener">Run demo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nothing = <span class="literal">undefined</span>;  </span><br><span class="line"><span class="keyword">const</span> missingObject = <span class="literal">null</span>;  </span><br><span class="line"><span class="keyword">const</span> two = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(&#123; ...nothing &#125;);       <span class="comment">// =&gt; &#123; &#125;  </span></span><br><span class="line"><span class="built_in">console</span>.log(&#123; ...missingObject &#125;); <span class="comment">// =&gt; &#123; &#125;  </span></span><br><span class="line"><span class="built_in">console</span>.log(&#123; ...two &#125;);           <span class="comment">// =&gt; &#123; &#125;</span></span><br></pre></td></tr></table></figure><p>如上所示：从 <code>nothing</code>, <code>missingObject</code> 和 <code>two</code>不会复制任何属性。</p><p>当然，这只是一个演示，毕竟根本没有理由在一个原始类型的值上面使用对象扩展符。</p><h4 id="3-剩余属性"><a href="#3-剩余属性" class="headerlink" title="3. 剩余属性"></a>3. 剩余属性</h4><p>当使用解构赋值将对象的属性值赋值给变量后，剩余的属性值将会被集合进一个剩余对象内。</p><p>下面的代码演示了怎么使用 rest 属性。</p><p><a href="https://repl.it/@panzerdp/PrimaryRawHagfish" target="_blank" rel="noopener">Run demo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> style = &#123;  </span><br><span class="line">  width: <span class="number">300</span>,</span><br><span class="line">  marginLeft: <span class="number">10</span>,</span><br><span class="line">  marginRight: <span class="number">30</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; width, ...margin &#125; = style;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(width);  <span class="comment">// =&gt; 300  </span></span><br><span class="line"><span class="built_in">console</span>.log(margin); <span class="comment">// =&gt; &#123; marginLeft: 10, marginRight: 30 &#125;</span></span><br></pre></td></tr></table></figure><p>通过解构赋值，我们定义了一个新的变量 <code>width</code> ，并将它的值设置为 <code>style.width</code>。而解构赋值声明内的 <code>...margin</code> 则获得了 <code>style</code> 对象的其余属性，<code>margin</code> 对象获取了 <code>marginLeft</code> 和 <code>marginRight</code> 属性。</p><p>rest 操作符同样只会获取自有属性和可枚举属性。</p><p>注意，在解构赋值内，rest 操作符只能放到最后，因此 <code>const { ...margin , width } = style</code> 无效，并会抛出一个 <code>SyntaxError: Rest element must be last element</code> 错误。</p><h3 id="4-结论"><a href="#4-结论" class="headerlink" title="4. 结论"></a>4. 结论</h3><p>对象扩展需要以下几点：</p><ul><li>它只会提取对象的自有属性和可枚举属性</li><li>后定义的属性值会覆盖之前定义过的同名属性值</li></ul><p>同时，对象扩展使用上方便简洁，能更好的处理嵌套对象，保持不可变性，在实现对象克隆和填充默认属性值上也使用方便。</p><p>而 <code>rest</code> 操作符在解构赋值时可以收集剩余的属性。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;合并多个 Javascript 对象是常见的工作，但不好的是，至少到目前，Javascript 仍然没有一种方便的方法来完成这个工作。至少现在是这样。&lt;/p&gt;
&lt;p&gt;在 ES5 时代，你可以使用 Lodash 的 &lt;code&gt;_.extend(target, [sources])&lt;/code&gt; 方法，而 ES2015 则引入了 &lt;code&gt;Object.assign(target, [sources])&lt;/code&gt; 方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="译文" scheme="http://yoursite.com/tags/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>ES6 之 Symbol</title>
    <link href="http://yoursite.com/posts/9ced4e66/"/>
    <id>http://yoursite.com/posts/9ced4e66/</id>
    <published>2018-04-25T10:41:11.000Z</published>
    <updated>2018-05-07T12:56:56.993Z</updated>
    
    <content type="html"><![CDATA[<p>Symbol 是 ES6 增加的第7种数据类型，也是第6种原始数据类型。<br>symbol 值用来创建匿名的对象属性，同时也是唯一的，不会与其他属性名冲突。</p><a id="more"></a><h2 id="创建一个-symbol-值"><a href="#创建一个-symbol-值" class="headerlink" title="创建一个 symbol 值"></a>创建一个 symbol 值</h2><p>Symbol 是一个函数，调用这个函数即创建了一个 symbol 值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>  <span class="comment">//function</span></span><br><span class="line"><span class="keyword">var</span> sym = <span class="built_in">Symbol</span>()</span><br></pre></td></tr></table></figure><p>但是 Symbol 不是一个构造函数，使用 new 来创建，会抛出错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sym = <span class="keyword">new</span> <span class="built_in">Symbol</span>() <span class="comment">// TypeError: Symbol is not a constructor</span></span><br></pre></td></tr></table></figure><p>Symbol 函数可以接受一个参数，用于描述这个 symbol ，但是也仅仅是用于描述而已<br>调用 toSring 方法可以读取到这个描述</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sym1 = <span class="built_in">Symbol</span>(<span class="string">'hello world'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sym1) <span class="comment">// Symbol(hello world)</span></span><br></pre></td></tr></table></figure><p>即使传入完全一样的描述，所创建的 symbol 也是不相同的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sym1 = <span class="built_in">Symbol</span>(<span class="string">'hello world'</span>)</span><br><span class="line"><span class="keyword">var</span> sym2 = <span class="built_in">Symbol</span>(<span class="string">'hello world'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sym1 === sym2) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="使用-symbol"><a href="#使用-symbol" class="headerlink" title="使用 symbol"></a>使用 symbol</h2><p>symbol 用于对象属性时，不能使用点字符，只能用于计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> sym = <span class="built_in">Symbol</span>(<span class="string">'hello world'</span>)</span><br><span class="line">obj[sym] = <span class="string">'hello Symbol'</span></span><br></pre></td></tr></table></figure><h2 id="重复使用一个-symbol"><a href="#重复使用一个-symbol" class="headerlink" title="重复使用一个 symbol"></a>重复使用一个 symbol</h2><p>前面说过 每一个 symbol 值都是独一无二的，但是有时候我们也需要共用一个 symbol ，这时候就需要用到 <code>Symbol.for</code> 这一方法了。</p><p>Symbol.for 方法接受一个 key 参数，根据这个 key 在全局的 Symbol 注册值中查找，如果之前已经通过 Symbol.for 方法和该key 创建过，那么就返回这个已经创建的 symbol 值，否则以 key 值创建一个，并注册一个全局值。下面这个例子可以比较 <code>Symbol</code> 和 <code>Symbol.for</code> 的不同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sym1 = <span class="built_in">Symbol</span>(<span class="string">'hello world'</span>)</span><br><span class="line"><span class="keyword">var</span> sym2 = <span class="built_in">Symbol</span>(<span class="string">'hello world'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sym1 === sym2) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sym3 = <span class="built_in">Symbol</span>.for(<span class="string">'global'</span>)</span><br><span class="line"><span class="keyword">var</span> sym4 = <span class="built_in">Symbol</span>.for(<span class="string">'global'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sym3 === sym4) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>当要创建 sym4 时，由于之前 已经用 global 这个值创建了 sym3 ，因此会直接把 sym3 的值赋给 sym4</p><p>和 Symbol.for 对应的另一个方法是 Symbol.keyFor<br>Symbol.keyFor 方法接受一个 symbol 值作为参数，返回对应的 key 值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接上例</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(sym3)) <span class="comment">// global</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(sym4)) <span class="comment">// global</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(sym1)) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>基本上，Symbol 了解这些就已经足够日常使用了。<br>剩下的一些零零散散的知识和一些 Well-known Symbol 之后抽空看看。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Symbol 是 ES6 增加的第7种数据类型，也是第6种原始数据类型。&lt;br&gt;symbol 值用来创建匿名的对象属性，同时也是唯一的，不会与其他属性名冲突。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
</feed>
